version: "3"

services:
  ## NETWORKING

  # reverse proxy
  traefik:
    container_name: traefik
    image: traefik:latest
    ports:
      # proxy entrypoints
      - 80:80/tcp # web
      - 443:443/tcp # websecure

      # service entrypoints
      - 9696:9696 # prowlarr
      - 8989:8989 # sonarr
      - 7878:7878 # radarr
      - 8686:8686 # lidarr
      - 8787:8787 # readarr
      - 9091:9091 # transmission
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${CONFIG_DIR}/traefik/providers:/config
      - ${CONFIG_DIR}/traefik/certs:/etc/certs
    command:
      - "--entrypoints.web.address=:80/tcp"
      - "--entrypoints.websecure.address=:443/tcp"
      - "--providers.docker"
      - "--providers.docker.defaultRule=Host(`{{ trimPrefix `/` .Name }}.docker.localhost`)"
      - "--api.insecure" # FIX THIS
      - "--log=true"
      - "--log.level=info"
      - "--accesslog=true"
      - "--providers.file.directory=/config"
      - "--providers.file.watch=true"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--certificatesresolvers.tlsresolver.acme.tlschallenge"
      - "--certificatesresolvers.tlsresolver.acme.email=${TRAEFIK_TLS_EMAIL}"
      - "--certificatesresolvers.tlsresolver.acme.storage=acme.json"
    labels:
      # Dashboard
      - traefik.http.routers.traefik.rule=Host(`${TRAEFIK_DASHBOARD_URL}`)
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.routers.traefik.tls.certresolver=tlsresolver
      - traefik.http.routers.traefik.entrypoints=websecure
      # - traefik.http.routers.traefik.middlewares=authdashboard # FIX THIS
      # - traefik.http.middlewares.authdashboard.basicauth.users=${TRAEFIK_DASHBOARD_USER} # FIX THIS
    restart: unless-stopped
  
  # nordvpn client
  vpn:
    container_name: nordvpn
    image: qmcgaw/gluetun
    cap_add:
      - NET_ADMIN
    environment:
      - VPN_SERVICE_PROVIDER=nordvpn
      - OPENVPN_USER=${NORDVPN_USER}
      - OPENVPN_PASSWORD=${NORDVPN_PASS}
      - SERVER_REGIONS=United States

  # dns and network adblock
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    ports:
      - "53:53/tcp"
      - "53:53/udp"
    dns:
      - 127.0.0.1
      - 9.9.9.9
    environment:
      TZ: ${TIMEZONE}
      WEBPASSWORD: '${PIHOLE_PASSWORD}'
      VIRTUAL_HOST: '${PIHOLE_URL}'
      PIHOLE_DNS_: 9.9.9.9;149.112.112.112;1.1.1.1
      DNSSEC: 'true'
      ServerIP: ${HOST_IP}
      DNSMASQ_LISTENING: all
      WEBTHEME: default-dark
      PIHOLE_DOMAIN: public
    volumes:
      - ${CONFIG_DIR}/pihole/etc:/etc/pihole
      - ${CONFIG_DIR}/pihole/dnsmasq.d:/etc/dnsmasq.d
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pihole.rule=Host(`${PIHOLE_URL}`)"
      - "traefik.http.routers.pihole.entrypoints=websecure"
      - "traefik.http.routers.pihole.tls.certresolver=tlsresolver"
    restart: unless-stopped

  ## DATABASE

  # database
  postgres:
    container_name: postgres_db
    image: postgres:13.5
    command: postgres -c 'max_connections=1000'
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
       - ${CONFIG_DIR}/postgres/db_data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    restart: unless-stopped
  
  # database interface
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: "True"
    volumes:
       - ${CONFIG_DIR}/postgres/pgadmin_data:/var/lib/pgadmin
       - ${CONFIG_DIR}/postgres/backup:/backup
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=Host(`${PGADMIN_URL}`)"
      - "traefik.http.routers.pgadmin.entrypoints=websecure"
      - "traefik.http.routers.pgadmin.tls.certresolver=tlsresolver"
    restart: unless-stopped

  ## NOTES MANAGEMENT

  # knowledgebase
  trilium:
    container_name: trilium
    image: zadam/trilium
    environment:
      - TRILIUM_DATA_DIR=/data
    volumes:
      - ${CONFIG_DIR}/trilium:/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.trilium.rule=Host(`${TRILIUM_URL}`)"
      - "traefik.http.routers.trilium.entrypoints=websecure"
      - "traefik.http.routers.trilium.tls.certresolver=tlsresolver"
      - "traefik.http.services.trilium.loadbalancer.server.port=8080"
    restart: unless-stopped

  # ## MEDIA MANAGEMENT

  # #indexer management
  # prowlarr:
  #   image: lscr.io/linuxserver/prowlarr:develop
  #   container_name: prowlarr
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=${TIMEZONE}
  #   volumes:
  #     - ${CONFIG_DIR}/prowlarr:/config
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.prowlarr.rule=Host(`${PROWLARR_URL}`)"
  #     - "traefik.http.services.prowlarr.loadbalancer.server.port=9696"
  #   network_mode: container:vpn
  #   depends_on:
  #     - vpn
  #   restart: unless-stopped

  # # tv show management
  # sonarr:
  #   image: lscr.io/linuxserver/sonarr:latest
  #   container_name: sonarr
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=${TIMEZONE}
  #   volumes:
  #     - ${CONFIG_DIR}/sonarr:/config
  #     - ${MEDIA_DIR}:/data
  #     - ${DOWNLOADS_DIR}:/downloads
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.sonarr.rule=Host(`${SONARR_URL}`)"
  #     - "traefik.http.services.sonarr.loadbalancer.server.port=8989"
  #   network_mode: container:vpn
  #   depends_on:
  #     - vpn
  #   restart: unless-stopped

  # # movie management
  # radarr:
  #   image: lscr.io/linuxserver/radarr:latest
  #   container_name: radarr
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=${TIMEZONE}
  #   volumes:
  #     - ${CONFIG_DIR}/radarr:/config
  #     - ${MEDIA_DIR}:/data
  #     - ${DOWNLOADS_DIR}:/downloads
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.radarr.rule=Host(`${RADARR_URL}`)"
  #     - "traefik.http.services.radarr.loadbalancer.server.port=7878"
  #   network_mode: container:vpn
  #   depends_on:
  #     - vpn
  #   restart: unless-stopped

  # # music management
  # lidarr:
  #   image: lscr.io/linuxserver/lidarr:latest
  #   container_name: lidarr
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=${TIMEZONE}
  #   volumes:
  #     - ${CONFIG_DIR}/lidarr:/config
  #     - ${MEDIA_DIR}:/data
  #     - ${DOWNLOADS_DIR}:/downloads
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.lidarr.rule=Host(`${LIDARR_URL}`)"
  #     - "traefik.http.services.lidarr.loadbalancer.server.port=8686"
  #   network_mode: container:vpn
  #   depends_on:
  #     - vpn
  #   restart: unless-stopped

  # # book management
  # readarr:
  #   image: lscr.io/linuxserver/readarr:develop
  #   container_name: readarr
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=${TIMEZONE}
  #   volumes:
  #     - ${CONFIG_DIR}/readarr:/config
  #     - ${MEDIA_DIR}:/data
  #     - ${DOWNLOADS_DIR}:/downloads
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.readarr.rule=Host(`${READARR_URL}`)"
  #     - "traefik.http.services.readarr.loadbalancer.server.port=8787"
  #   network_mode: container:vpn
  #   depends_on:
  #     - vpn
  #   restart: unless-stopped

  # calibre:
  #   image: lscr.io/linuxserver/calibre:latest
  #   container_name: calibre
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=${TIMEZONE}
  #   volumes:
  #     - ${CONFIG_DIR}/calibre:/config
  #     - ${MEDIA_DIR}/books/uploads:/uploads
  #     - ${MEDIA_DIR}/books/library:/Calibre_Library
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.calibre-library.rule=Host(`${CALIBRE_LIBRARY_URL}`)"
  #     - "traefik.http.routers.calibre-library.entrypoints=websecure"
  #     - "traefik.http.routers.calibre-library.tls.certresolver=tlsresolver"
  #     - "traefik.http.services.calibre-library.loadbalancer.server.port=8080"

  #     - "traefik.http.routers.calibre-reader.rule=Host(`${CALIBRE_READER_URL}`)"
  #     - "traefik.http.routers.calibre-reader.entrypoints=websecure"
  #     - "traefik.http.routers.calibre-reader.tls.certresolver=tlsresolver"
  #     - "traefik.http.services.calibre-reader.loadbalancer.server.port=8081"
  #   restart: unless-stopped

  # # calibre library web interface
  # calibre-web:
  #   image: ghcr.io/linuxserver/calibre-web
  #   container_name: calibre-web
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=${TIMEZONE}
  #   volumes:
  #     - ${CONFIG_DIR}/calibre-web:/config
  #     - ${MEDIA_DIR}/books/library:/books
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.calibre-web.rule=Host(`${CALIBRE_WEB_URL}`)"
  #     - "traefik.http.routers.calibre-web.entrypoints=websecure"
  #     - "traefik.http.routers.calibre-web.tls.certresolver=tlsresolver"
  #     - "traefik.http.services.calibre-web.loadbalancer.server.port=8083"
  #   restart: unless-stopped
  #   depends_on:
  #     - calibre

  ## GENERAL CLIENTS
  
  # download client
  # transmission:
  #   image: lscr.io/linuxserver/transmission
  #   container_name: transmission
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=${TIMEZONE}
  #     - TRANSMISSION_WEB_HOME=/flood-for-transmission/
  #     - USER=${TRANSMISSION_USERNAME}
  #     - PASS=${TRANSMISSION_PASSWORD}
  #   volumes:
  #     - ${CONFIG_DIR}/transmission:/config
  #     - ${DOWNLOADS_DIR}:/downloads
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.transmission.rule=Host(`${TRANSMISSION_URL}`)"
  #     - "traefik.http.services.transmission.loadbalancer.server.port=9091"
  #   network_mode: container:vpn
  #   depends_on:
  #     - vpn
  #   restart: unless-stopped

  # mqtt client
  mosquitto:
    image: eclipse-mosquitto:latest
    container_name: mosquitto
    ports:
      - 1883:1883
      - 8883:8883
    volumes:
      - ${CONFIG_DIR}/mosquitto/data:/mosquitto/data
      - ${CONFIG_DIR}/mosquitto/log:/mosquitto/log
      - ${CONFIG_DIR}/mosquitto/config:/mosquitto/config
    restart: unless-stopped
