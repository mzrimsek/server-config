version: "3"

services:
  # reverse proxy
  traefik:
    container_name: traefik
    image: traefik:2.7
    ports:
      - 80:80/tcp # web
      - 443:443/tcp # websecure
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${CONFIG_DIR}/traefik/providers:/config
      - ${CONFIG_DIR}/traefik/certs:/etc/certs
    command:
      - "--entrypoints.web.address=:80/tcp"
      - "--entrypoints.websecure.address=:443/tcp"
      - "--providers.docker"
      - "--providers.docker.defaultRule=Host(`{{ trimPrefix `/` .Name }}.docker.localhost`)"
      - "--api.insecure"
      - "--log=true"
      - "--log.level=info"
      - "--accesslog=true"
      - "--metrics.prometheus=true"
      - "--providers.file.directory=/config"
      - "--providers.file.watch=true"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--certificatesresolvers.tlsresolver.acme.tlschallenge"
      - "--certificatesresolvers.tlsresolver.acme.email=${TRAEFIK_TLS_EMAIL}"
      - "--certificatesresolvers.tlsresolver.acme.storage=acme.json"
    labels:
      - traefik.http.routers.traefik.rule=Host(`${TRAEFIK_DASHBOARD_URL}`)
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.routers.traefik.tls.certresolver=tlsresolver
      - traefik.http.routers.traefik.entrypoints=websecure
      - traefik.http.routers.traefik.middlewares=authelia@docker
      - traefik.http.middlewares.limit.buffering.maxRequestBodyBytes=2000000 # raise max body size to 2MB
      - traefik.http.middlewares.authelia.forwardauth.address=http://${AUTHELIA_HOST}/api/verify?rd=https://${AUTHELIA_URL}
      - traefik.http.middlewares.authelia.forwardauth.trustForwardHeader=true
      - traefik.http.middlewares.authelia.forwardauth.tls.insecureSkipVerify=true
      - traefik.http.middlewares.authelia.forwardauth.authResponseHeaders=Remote-User,Remote-Groups,Remote-Name,Remote-Email
    restart: unless-stopped

  # budgeting
  fireflyiii:
    container_name: fireflyiii
    image: fireflyiii/core:latest
    environment: 
      APP_KEY: ${FIREFLY_APP_KEY}
      TRUSTED_PROXIES: '**'
      DB_HOST: ${DATABASE_HOST}
      DB_PORT: 5432
      DB_CONNECTION: pgsql
      DB_DATABASE: fireflyiii
      DB_USERNAME: ${DATABASE_USER}
      DB_PASSWORD: ${DATABASE_PASSWORD}
      TZ: ${TIMEZONE}
    volumes:
      - ${CONFIG_DIR}/fireflyiii:/var/www/html/storage/upload
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.fireflyiii.rule=Host(`${FIREFLY_URL}`)"
      - "traefik.http.routers.fireflyiii.entrypoints=websecure"
      - "traefik.http.routers.fireflyiii.tls.certresolver=tlsresolver"
      - "traefik.http.services.fireflyiii.loadbalancer.server.port=8080"
      - "traefik.http.routers.fireflyiii.middlewares=authelia@docker"
      - "com.centurylinklabs.watchtower.enable=true"
    restart: unless-stopped

  # budgeting automation
  fireflyiii_cron:
    container_name: fireflyiii_cron
    image: alpine
    command: sh -c "echo \"0 3 * * * wget -qO- https://${FIREFLY_URL}/api/v1/cron/${FIREFLY_COMMAND_LINE_TOKEN}\" | crontab - && crond -f -L /dev/stdout"
    restart: unless-stopped

  # tasks backend
  vikunja_api:
    container_name: vikunja_api
    image: vikunja/api:latest
    environment:
      VIKUNJA_DATABASE_HOST: ${DATABASE_HOST}
      VIKUNJA_DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      VIKUNJA_DATABASE_TYPE: postgres
      VIKUNJA_DATABASE_USER: ${DATABASE_USER}
      VIKUNJA_DATABASE_DATABASE: vikunja
      VIKUNJA_SERVICE_ENABLEREGISTRATION: 0
      VIKUNJA_MAILER_ENABLED: 1
      VIKUNJA_MAILER_HOST: ${MAILER_HOST}
      VIKUNJA_MAILER_PORT: ${MAILER_PORT}
      VIKUNJA_MAILER_USERNAME: ${MAILER_USERNAME}
      VIKUNJA_MAILER_PASSWORD: ${MAILER_PASSWORD}
      VIKUNJA_SERVICE_TIMEZONE: ${TIMEZONE}
      VIKUNJA_SERVICE_JWTSECRET: ${VIKUNJA_JWT_SECRET}
      VIKUNJA_SERVICE_FRONTENDURL: https://${VIKUNJA_URL}
    volumes: 
      - ${CONFIG_DIR}/vikunja/files:/app/vikunja/files
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vikunja-api.rule=Host(`${VIKUNJA_URL}`) && PathPrefix(`/api/v1`, `/dav/`, `/.well-known/`)"
      - "traefik.http.routers.vikunja-api.entrypoints=websecure"
      - "traefik.http.routers.vikunja-api.tls.certresolver=tlsresolver"
      - "com.centurylinklabs.watchtower.enable=true"
    restart: unless-stopped

  # tasks frontend
  vikunja_frontend:
    container_name: vikunja_frontend
    image: vikunja/frontend:latest
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vikunja-frontend.rule=Host(`${VIKUNJA_URL}`)"
      - "traefik.http.routers.vikunja-frontend.entrypoints=websecure"
      - "traefik.http.routers.vikunja-frontend.tls.certresolver=tlsresolver"
      - "traefik.http.routers.vikunja-frontend.middlewares=authelia@docker"
      - "com.centurylinklabs.watchtower.enable=true"
    restart: unless-stopped

  # data backup
  backup:
    container_name: duplicati
    image: lscr.io/linuxserver/duplicati:latest
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:duplicati
      - TP_THEME=${APP_THEME}
    volumes:
      - ${CONFIG_DIR}/duplicati:/config
      - ${CONFIG_DIR}/duplicati/backups:/backups
      - ${BACKUP_ROOT1}:/source/root1
      - ${BACKUP_ROOT2}:/source/root2
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    network_mode: "host" # port 8200
    restart: unless-stopped

